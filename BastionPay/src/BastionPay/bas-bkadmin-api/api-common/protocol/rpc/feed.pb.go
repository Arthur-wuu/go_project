// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feed.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of Side from common.proto

// Ignoring public import of State from common.proto

// Ignoring public import of Type from common.proto

// Ignoring public import of Role from common.proto

type Ticker struct {
	Pair          string  `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
	Price         string  `protobuf:"bytes,2,opt,name=price" json:"price,omitempty"`
	Ask           string  `protobuf:"bytes,3,opt,name=ask" json:"ask,omitempty"`
	Bid           string  `protobuf:"bytes,4,opt,name=bid" json:"bid,omitempty"`
	Change        float64 `protobuf:"fixed64,5,opt,name=change" json:"change,omitempty"`
	BaseAssetVol  string  `protobuf:"bytes,6,opt,name=base_asset_vol,json=baseAssetVol" json:"base_asset_vol,omitempty"`
	QuoteAssetVol string  `protobuf:"bytes,7,opt,name=quote_asset_vol,json=quoteAssetVol" json:"quote_asset_vol,omitempty"`
	High          string  `protobuf:"bytes,8,opt,name=high" json:"high,omitempty"`
	Low           string  `protobuf:"bytes,9,opt,name=low" json:"low,omitempty"`
	Time          int64   `protobuf:"varint,10,opt,name=time" json:"time,omitempty"`
}

func (m *Ticker) Reset()                    { *m = Ticker{} }
func (m *Ticker) String() string            { return proto.CompactTextString(m) }
func (*Ticker) ProtoMessage()               {}
func (*Ticker) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Ticker) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *Ticker) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *Ticker) GetAsk() string {
	if m != nil {
		return m.Ask
	}
	return ""
}

func (m *Ticker) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *Ticker) GetChange() float64 {
	if m != nil {
		return m.Change
	}
	return 0
}

func (m *Ticker) GetBaseAssetVol() string {
	if m != nil {
		return m.BaseAssetVol
	}
	return ""
}

func (m *Ticker) GetQuoteAssetVol() string {
	if m != nil {
		return m.QuoteAssetVol
	}
	return ""
}

func (m *Ticker) GetHigh() string {
	if m != nil {
		return m.High
	}
	return ""
}

func (m *Ticker) GetLow() string {
	if m != nil {
		return m.Low
	}
	return ""
}

func (m *Ticker) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type RequestGetTickers struct {
	Pairs      []string `protobuf:"bytes,1,rep,name=pairs" json:"pairs,omitempty"`
	ShowDetail bool     `protobuf:"varint,2,opt,name=show_detail,json=showDetail" json:"show_detail,omitempty"`
}

func (m *RequestGetTickers) Reset()                    { *m = RequestGetTickers{} }
func (m *RequestGetTickers) String() string            { return proto.CompactTextString(m) }
func (*RequestGetTickers) ProtoMessage()               {}
func (*RequestGetTickers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *RequestGetTickers) GetPairs() []string {
	if m != nil {
		return m.Pairs
	}
	return nil
}

func (m *RequestGetTickers) GetShowDetail() bool {
	if m != nil {
		return m.ShowDetail
	}
	return false
}

type ResponseGetTickers struct {
	Tickers []*Ticker `protobuf:"bytes,1,rep,name=tickers" json:"tickers,omitempty"`
}

func (m *ResponseGetTickers) Reset()                    { *m = ResponseGetTickers{} }
func (m *ResponseGetTickers) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetTickers) ProtoMessage()               {}
func (*ResponseGetTickers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *ResponseGetTickers) GetTickers() []*Ticker {
	if m != nil {
		return m.Tickers
	}
	return nil
}

type Level struct {
	Size   int32  `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Price  string `protobuf:"bytes,2,opt,name=price" json:"price,omitempty"`
	Amount string `protobuf:"bytes,3,opt,name=amount" json:"amount,omitempty"`
	Sum    string `protobuf:"bytes,4,opt,name=sum" json:"sum,omitempty"`
}

func (m *Level) Reset()                    { *m = Level{} }
func (m *Level) String() string            { return proto.CompactTextString(m) }
func (*Level) ProtoMessage()               {}
func (*Level) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *Level) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Level) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *Level) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Level) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

type LevelUpdate struct {
	Side   Side   `protobuf:"varint,1,opt,name=side,enum=rpc.Side" json:"side,omitempty"`
	Size   int32  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Price  string `protobuf:"bytes,3,opt,name=price" json:"price,omitempty"`
	Amount string `protobuf:"bytes,4,opt,name=amount" json:"amount,omitempty"`
	Sum    string `protobuf:"bytes,5,opt,name=sum" json:"sum,omitempty"`
	Seq    uint64 `protobuf:"varint,6,opt,name=seq" json:"seq,omitempty"`
}

func (m *LevelUpdate) Reset()                    { *m = LevelUpdate{} }
func (m *LevelUpdate) String() string            { return proto.CompactTextString(m) }
func (*LevelUpdate) ProtoMessage()               {}
func (*LevelUpdate) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *LevelUpdate) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_NO_SIDE
}

func (m *LevelUpdate) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *LevelUpdate) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *LevelUpdate) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *LevelUpdate) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

func (m *LevelUpdate) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type RequestGetDepth struct {
	Pair      string `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
	Limit     int32  `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Pricision int32  `protobuf:"varint,3,opt,name=pricision" json:"pricision,omitempty"`
}

func (m *RequestGetDepth) Reset()                    { *m = RequestGetDepth{} }
func (m *RequestGetDepth) String() string            { return proto.CompactTextString(m) }
func (*RequestGetDepth) ProtoMessage()               {}
func (*RequestGetDepth) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *RequestGetDepth) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *RequestGetDepth) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestGetDepth) GetPricision() int32 {
	if m != nil {
		return m.Pricision
	}
	return 0
}

type ResponseGetDepth struct {
	Pair   string         `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
	Update []*LevelUpdate `protobuf:"bytes,2,rep,name=update" json:"update,omitempty"`
	Ask    []*Level       `protobuf:"bytes,3,rep,name=ask" json:"ask,omitempty"`
	Bid    []*Level       `protobuf:"bytes,4,rep,name=bid" json:"bid,omitempty"`
	Seq    uint64         `protobuf:"varint,6,opt,name=seq" json:"seq,omitempty"`
}

func (m *ResponseGetDepth) Reset()                    { *m = ResponseGetDepth{} }
func (m *ResponseGetDepth) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetDepth) ProtoMessage()               {}
func (*ResponseGetDepth) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *ResponseGetDepth) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *ResponseGetDepth) GetUpdate() []*LevelUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *ResponseGetDepth) GetAsk() []*Level {
	if m != nil {
		return m.Ask
	}
	return nil
}

func (m *ResponseGetDepth) GetBid() []*Level {
	if m != nil {
		return m.Bid
	}
	return nil
}

func (m *ResponseGetDepth) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type RequestGetDepthState struct {
	Pair string `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
}

func (m *RequestGetDepthState) Reset()                    { *m = RequestGetDepthState{} }
func (m *RequestGetDepthState) String() string            { return proto.CompactTextString(m) }
func (*RequestGetDepthState) ProtoMessage()               {}
func (*RequestGetDepthState) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *RequestGetDepthState) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

type ResponseGetDepthState struct {
	Pair           string `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
	SumOfAsks      int32  `protobuf:"varint,2,opt,name=sum_of_asks,json=sumOfAsks" json:"sum_of_asks,omitempty"`
	SumOfBids      int32  `protobuf:"varint,3,opt,name=sum_of_bids,json=sumOfBids" json:"sum_of_bids,omitempty"`
	SumOfAskLevels int32  `protobuf:"varint,4,opt,name=sum_of_ask_levels,json=sumOfAskLevels" json:"sum_of_ask_levels,omitempty"`
	SumOfBidLevels int32  `protobuf:"varint,5,opt,name=sum_of_bid_levels,json=sumOfBidLevels" json:"sum_of_bid_levels,omitempty"`
}

func (m *ResponseGetDepthState) Reset()                    { *m = ResponseGetDepthState{} }
func (m *ResponseGetDepthState) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetDepthState) ProtoMessage()               {}
func (*ResponseGetDepthState) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *ResponseGetDepthState) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *ResponseGetDepthState) GetSumOfAsks() int32 {
	if m != nil {
		return m.SumOfAsks
	}
	return 0
}

func (m *ResponseGetDepthState) GetSumOfBids() int32 {
	if m != nil {
		return m.SumOfBids
	}
	return 0
}

func (m *ResponseGetDepthState) GetSumOfAskLevels() int32 {
	if m != nil {
		return m.SumOfAskLevels
	}
	return 0
}

func (m *ResponseGetDepthState) GetSumOfBidLevels() int32 {
	if m != nil {
		return m.SumOfBidLevels
	}
	return 0
}

type MarketTrades struct {
	Price  string `protobuf:"bytes,1,opt,name=price" json:"price,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount" json:"amount,omitempty"`
	Side   Side   `protobuf:"varint,3,opt,name=side,enum=rpc.Side" json:"side,omitempty"`
	Time   int64  `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	ExecId uint64 `protobuf:"varint,5,opt,name=exec_id,json=execId" json:"exec_id,omitempty"`
}

func (m *MarketTrades) Reset()                    { *m = MarketTrades{} }
func (m *MarketTrades) String() string            { return proto.CompactTextString(m) }
func (*MarketTrades) ProtoMessage()               {}
func (*MarketTrades) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *MarketTrades) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *MarketTrades) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *MarketTrades) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_NO_SIDE
}

func (m *MarketTrades) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MarketTrades) GetExecId() uint64 {
	if m != nil {
		return m.ExecId
	}
	return 0
}

type MarketTradesUpdate struct {
	Price  string `protobuf:"bytes,1,opt,name=price" json:"price,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount" json:"amount,omitempty"`
	Side   Side   `protobuf:"varint,3,opt,name=side,enum=rpc.Side" json:"side,omitempty"`
	Time   int64  `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	Pair   string `protobuf:"bytes,5,opt,name=pair" json:"pair,omitempty"`
	ExecId uint64 `protobuf:"varint,6,opt,name=exec_id,json=execId" json:"exec_id,omitempty"`
}

func (m *MarketTradesUpdate) Reset()                    { *m = MarketTradesUpdate{} }
func (m *MarketTradesUpdate) String() string            { return proto.CompactTextString(m) }
func (*MarketTradesUpdate) ProtoMessage()               {}
func (*MarketTradesUpdate) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *MarketTradesUpdate) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *MarketTradesUpdate) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *MarketTradesUpdate) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_NO_SIDE
}

func (m *MarketTradesUpdate) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MarketTradesUpdate) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *MarketTradesUpdate) GetExecId() uint64 {
	if m != nil {
		return m.ExecId
	}
	return 0
}

type RequestGetMarketTrades struct {
	Pair  string `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
	Limit int32  `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *RequestGetMarketTrades) Reset()                    { *m = RequestGetMarketTrades{} }
func (m *RequestGetMarketTrades) String() string            { return proto.CompactTextString(m) }
func (*RequestGetMarketTrades) ProtoMessage()               {}
func (*RequestGetMarketTrades) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *RequestGetMarketTrades) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *RequestGetMarketTrades) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ResponseGetMarketTrades struct {
	Pair   string          `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
	Trades []*MarketTrades `protobuf:"bytes,2,rep,name=trades" json:"trades,omitempty"`
}

func (m *ResponseGetMarketTrades) Reset()                    { *m = ResponseGetMarketTrades{} }
func (m *ResponseGetMarketTrades) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetMarketTrades) ProtoMessage()               {}
func (*ResponseGetMarketTrades) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *ResponseGetMarketTrades) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *ResponseGetMarketTrades) GetTrades() []*MarketTrades {
	if m != nil {
		return m.Trades
	}
	return nil
}

type Candlestick struct {
	Time  int64  `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Open  string `protobuf:"bytes,2,opt,name=open" json:"open,omitempty"`
	High  string `protobuf:"bytes,3,opt,name=high" json:"high,omitempty"`
	Low   string `protobuf:"bytes,4,opt,name=low" json:"low,omitempty"`
	Close string `protobuf:"bytes,5,opt,name=close" json:"close,omitempty"`
	Vol   string `protobuf:"bytes,6,opt,name=vol" json:"vol,omitempty"`
}

func (m *Candlestick) Reset()                    { *m = Candlestick{} }
func (m *Candlestick) String() string            { return proto.CompactTextString(m) }
func (*Candlestick) ProtoMessage()               {}
func (*Candlestick) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *Candlestick) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Candlestick) GetOpen() string {
	if m != nil {
		return m.Open
	}
	return ""
}

func (m *Candlestick) GetHigh() string {
	if m != nil {
		return m.High
	}
	return ""
}

func (m *Candlestick) GetLow() string {
	if m != nil {
		return m.Low
	}
	return ""
}

func (m *Candlestick) GetClose() string {
	if m != nil {
		return m.Close
	}
	return ""
}

func (m *Candlestick) GetVol() string {
	if m != nil {
		return m.Vol
	}
	return ""
}

type CandlestickUpdate struct {
	Time  int64  `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Open  string `protobuf:"bytes,2,opt,name=open" json:"open,omitempty"`
	High  string `protobuf:"bytes,3,opt,name=high" json:"high,omitempty"`
	Low   string `protobuf:"bytes,4,opt,name=low" json:"low,omitempty"`
	Close string `protobuf:"bytes,5,opt,name=close" json:"close,omitempty"`
	Vol   string `protobuf:"bytes,6,opt,name=vol" json:"vol,omitempty"`
	Pair  string `protobuf:"bytes,7,opt,name=pair" json:"pair,omitempty"`
	Cycle string `protobuf:"bytes,8,opt,name=cycle" json:"cycle,omitempty"`
}

func (m *CandlestickUpdate) Reset()                    { *m = CandlestickUpdate{} }
func (m *CandlestickUpdate) String() string            { return proto.CompactTextString(m) }
func (*CandlestickUpdate) ProtoMessage()               {}
func (*CandlestickUpdate) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *CandlestickUpdate) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CandlestickUpdate) GetOpen() string {
	if m != nil {
		return m.Open
	}
	return ""
}

func (m *CandlestickUpdate) GetHigh() string {
	if m != nil {
		return m.High
	}
	return ""
}

func (m *CandlestickUpdate) GetLow() string {
	if m != nil {
		return m.Low
	}
	return ""
}

func (m *CandlestickUpdate) GetClose() string {
	if m != nil {
		return m.Close
	}
	return ""
}

func (m *CandlestickUpdate) GetVol() string {
	if m != nil {
		return m.Vol
	}
	return ""
}

func (m *CandlestickUpdate) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *CandlestickUpdate) GetCycle() string {
	if m != nil {
		return m.Cycle
	}
	return ""
}

type RequestGetCandlestick struct {
	Pair  string `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
	Cycle string `protobuf:"bytes,2,opt,name=cycle" json:"cycle,omitempty"`
	Time  int64  `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	Limit int32  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *RequestGetCandlestick) Reset()                    { *m = RequestGetCandlestick{} }
func (m *RequestGetCandlestick) String() string            { return proto.CompactTextString(m) }
func (*RequestGetCandlestick) ProtoMessage()               {}
func (*RequestGetCandlestick) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *RequestGetCandlestick) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *RequestGetCandlestick) GetCycle() string {
	if m != nil {
		return m.Cycle
	}
	return ""
}

func (m *RequestGetCandlestick) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RequestGetCandlestick) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ResponseGetCandlestick struct {
	Pair    string         `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
	Cycle   string         `protobuf:"bytes,2,opt,name=cycle" json:"cycle,omitempty"`
	Candles []*Candlestick `protobuf:"bytes,4,rep,name=candles" json:"candles,omitempty"`
}

func (m *ResponseGetCandlestick) Reset()                    { *m = ResponseGetCandlestick{} }
func (m *ResponseGetCandlestick) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetCandlestick) ProtoMessage()               {}
func (*ResponseGetCandlestick) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *ResponseGetCandlestick) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *ResponseGetCandlestick) GetCycle() string {
	if m != nil {
		return m.Cycle
	}
	return ""
}

func (m *ResponseGetCandlestick) GetCandles() []*Candlestick {
	if m != nil {
		return m.Candles
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////
type RequestGetOrders struct {
	Tid      uint64   `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	Pair     string   `protobuf:"bytes,2,opt,name=pair" json:"pair,omitempty"`
	OrderIds []uint64 `protobuf:"varint,3,rep,packed,name=order_ids,json=orderIds" json:"order_ids,omitempty"`
}

func (m *RequestGetOrders) Reset()                    { *m = RequestGetOrders{} }
func (m *RequestGetOrders) String() string            { return proto.CompactTextString(m) }
func (*RequestGetOrders) ProtoMessage()               {}
func (*RequestGetOrders) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *RequestGetOrders) GetTid() uint64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *RequestGetOrders) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *RequestGetOrders) GetOrderIds() []uint64 {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

type Order struct {
	OrderId  uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	ClientId uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Type     Type   `protobuf:"varint,3,opt,name=type,enum=rpc.Type" json:"type,omitempty"`
	Side     Side   `protobuf:"varint,4,opt,name=side,enum=rpc.Side" json:"side,omitempty"`
	Price    string `protobuf:"bytes,5,opt,name=price" json:"price,omitempty"`
	Quantity string `protobuf:"bytes,6,opt,name=quantity" json:"quantity,omitempty"`
	AvgPrice string `protobuf:"bytes,7,opt,name=avg_price,json=avgPrice" json:"avg_price,omitempty"`
	Costs    string `protobuf:"bytes,8,opt,name=costs" json:"costs,omitempty"`
	Rest     string `protobuf:"bytes,9,opt,name=rest" json:"rest,omitempty"`
	Fees     string `protobuf:"bytes,10,opt,name=fees" json:"fees,omitempty"`
	State    State  `protobuf:"varint,11,opt,name=state,enum=rpc.State" json:"state,omitempty"`
	Created  int64  `protobuf:"varint,12,opt,name=created" json:"created,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *Order) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *Order) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Order) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_TYPE_NONE
}

func (m *Order) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_NO_SIDE
}

func (m *Order) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *Order) GetQuantity() string {
	if m != nil {
		return m.Quantity
	}
	return ""
}

func (m *Order) GetAvgPrice() string {
	if m != nil {
		return m.AvgPrice
	}
	return ""
}

func (m *Order) GetCosts() string {
	if m != nil {
		return m.Costs
	}
	return ""
}

func (m *Order) GetRest() string {
	if m != nil {
		return m.Rest
	}
	return ""
}

func (m *Order) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

func (m *Order) GetState() State {
	if m != nil {
		return m.State
	}
	return State_STATE_NONE
}

func (m *Order) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type OrderUpdate struct {
	Tid      uint64 `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	Pair     string `protobuf:"bytes,2,opt,name=pair" json:"pair,omitempty"`
	OrderId  uint64 `protobuf:"varint,3,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	ClientId uint64 `protobuf:"varint,4,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Side     Side   `protobuf:"varint,6,opt,name=side,enum=rpc.Side" json:"side,omitempty"`
	Price    string `protobuf:"bytes,7,opt,name=price" json:"price,omitempty"`
	Quantity string `protobuf:"bytes,8,opt,name=quantity" json:"quantity,omitempty"`
	AvgPrice string `protobuf:"bytes,9,opt,name=avg_price,json=avgPrice" json:"avg_price,omitempty"`
	Costs    string `protobuf:"bytes,10,opt,name=costs" json:"costs,omitempty"`
	Rest     string `protobuf:"bytes,11,opt,name=rest" json:"rest,omitempty"`
	Fees     string `protobuf:"bytes,12,opt,name=fees" json:"fees,omitempty"`
	State    State  `protobuf:"varint,13,opt,name=state,enum=rpc.State" json:"state,omitempty"`
	Created  int64  `protobuf:"varint,14,opt,name=created" json:"created,omitempty"`
}

func (m *OrderUpdate) Reset()                    { *m = OrderUpdate{} }
func (m *OrderUpdate) String() string            { return proto.CompactTextString(m) }
func (*OrderUpdate) ProtoMessage()               {}
func (*OrderUpdate) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *OrderUpdate) GetTid() uint64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *OrderUpdate) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *OrderUpdate) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *OrderUpdate) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OrderUpdate) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_NO_SIDE
}

func (m *OrderUpdate) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *OrderUpdate) GetQuantity() string {
	if m != nil {
		return m.Quantity
	}
	return ""
}

func (m *OrderUpdate) GetAvgPrice() string {
	if m != nil {
		return m.AvgPrice
	}
	return ""
}

func (m *OrderUpdate) GetCosts() string {
	if m != nil {
		return m.Costs
	}
	return ""
}

func (m *OrderUpdate) GetRest() string {
	if m != nil {
		return m.Rest
	}
	return ""
}

func (m *OrderUpdate) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

func (m *OrderUpdate) GetState() State {
	if m != nil {
		return m.State
	}
	return State_STATE_NONE
}

func (m *OrderUpdate) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type ResponseGetOrders struct {
	Tid    uint64   `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	Pair   string   `protobuf:"bytes,2,opt,name=pair" json:"pair,omitempty"`
	Orders []*Order `protobuf:"bytes,3,rep,name=orders" json:"orders,omitempty"`
}

func (m *ResponseGetOrders) Reset()                    { *m = ResponseGetOrders{} }
func (m *ResponseGetOrders) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetOrders) ProtoMessage()               {}
func (*ResponseGetOrders) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *ResponseGetOrders) GetTid() uint64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *ResponseGetOrders) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *ResponseGetOrders) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

func init() {
	proto.RegisterType((*Ticker)(nil), "rpc.Ticker")
	proto.RegisterType((*RequestGetTickers)(nil), "rpc.RequestGetTickers")
	proto.RegisterType((*ResponseGetTickers)(nil), "rpc.ResponseGetTickers")
	proto.RegisterType((*Level)(nil), "rpc.Level")
	proto.RegisterType((*LevelUpdate)(nil), "rpc.LevelUpdate")
	proto.RegisterType((*RequestGetDepth)(nil), "rpc.RequestGetDepth")
	proto.RegisterType((*ResponseGetDepth)(nil), "rpc.ResponseGetDepth")
	proto.RegisterType((*RequestGetDepthState)(nil), "rpc.RequestGetDepthState")
	proto.RegisterType((*ResponseGetDepthState)(nil), "rpc.ResponseGetDepthState")
	proto.RegisterType((*MarketTrades)(nil), "rpc.MarketTrades")
	proto.RegisterType((*MarketTradesUpdate)(nil), "rpc.MarketTradesUpdate")
	proto.RegisterType((*RequestGetMarketTrades)(nil), "rpc.RequestGetMarketTrades")
	proto.RegisterType((*ResponseGetMarketTrades)(nil), "rpc.ResponseGetMarketTrades")
	proto.RegisterType((*Candlestick)(nil), "rpc.Candlestick")
	proto.RegisterType((*CandlestickUpdate)(nil), "rpc.CandlestickUpdate")
	proto.RegisterType((*RequestGetCandlestick)(nil), "rpc.RequestGetCandlestick")
	proto.RegisterType((*ResponseGetCandlestick)(nil), "rpc.ResponseGetCandlestick")
	proto.RegisterType((*RequestGetOrders)(nil), "rpc.RequestGetOrders")
	proto.RegisterType((*Order)(nil), "rpc.Order")
	proto.RegisterType((*OrderUpdate)(nil), "rpc.OrderUpdate")
	proto.RegisterType((*ResponseGetOrders)(nil), "rpc.ResponseGetOrders")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Feed service

type FeedClient interface {
	// Get ticker.
	GetTicker(ctx context.Context, in *RequestGetTickers, opts ...grpc.CallOption) (*ResponseGetTickers, error)
	// Get depth.
	GetDepth(ctx context.Context, in *RequestGetDepth, opts ...grpc.CallOption) (*ResponseGetDepth, error)
	// Get depth status.
	GetDepthState(ctx context.Context, in *RequestGetDepthState, opts ...grpc.CallOption) (*ResponseGetDepthState, error)
	// Get maket trades.
	GetTrades(ctx context.Context, in *RequestGetMarketTrades, opts ...grpc.CallOption) (*ResponseGetMarketTrades, error)
	// Get candlesticks.
	GetCandlestick(ctx context.Context, in *RequestGetCandlestick, opts ...grpc.CallOption) (*ResponseGetCandlestick, error)
	// Get active order.
	GetOrders(ctx context.Context, in *RequestGetOrders, opts ...grpc.CallOption) (*ResponseGetOrders, error)
}

type feedClient struct {
	cc *grpc.ClientConn
}

func NewFeedClient(cc *grpc.ClientConn) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) GetTicker(ctx context.Context, in *RequestGetTickers, opts ...grpc.CallOption) (*ResponseGetTickers, error) {
	out := new(ResponseGetTickers)
	err := grpc.Invoke(ctx, "/rpc.Feed/GetTicker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) GetDepth(ctx context.Context, in *RequestGetDepth, opts ...grpc.CallOption) (*ResponseGetDepth, error) {
	out := new(ResponseGetDepth)
	err := grpc.Invoke(ctx, "/rpc.Feed/GetDepth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) GetDepthState(ctx context.Context, in *RequestGetDepthState, opts ...grpc.CallOption) (*ResponseGetDepthState, error) {
	out := new(ResponseGetDepthState)
	err := grpc.Invoke(ctx, "/rpc.Feed/GetDepthState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) GetTrades(ctx context.Context, in *RequestGetMarketTrades, opts ...grpc.CallOption) (*ResponseGetMarketTrades, error) {
	out := new(ResponseGetMarketTrades)
	err := grpc.Invoke(ctx, "/rpc.Feed/GetTrades", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) GetCandlestick(ctx context.Context, in *RequestGetCandlestick, opts ...grpc.CallOption) (*ResponseGetCandlestick, error) {
	out := new(ResponseGetCandlestick)
	err := grpc.Invoke(ctx, "/rpc.Feed/GetCandlestick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) GetOrders(ctx context.Context, in *RequestGetOrders, opts ...grpc.CallOption) (*ResponseGetOrders, error) {
	out := new(ResponseGetOrders)
	err := grpc.Invoke(ctx, "/rpc.Feed/GetOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Feed service

type FeedServer interface {
	// Get ticker.
	GetTicker(context.Context, *RequestGetTickers) (*ResponseGetTickers, error)
	// Get depth.
	GetDepth(context.Context, *RequestGetDepth) (*ResponseGetDepth, error)
	// Get depth status.
	GetDepthState(context.Context, *RequestGetDepthState) (*ResponseGetDepthState, error)
	// Get maket trades.
	GetTrades(context.Context, *RequestGetMarketTrades) (*ResponseGetMarketTrades, error)
	// Get candlesticks.
	GetCandlestick(context.Context, *RequestGetCandlestick) (*ResponseGetCandlestick, error)
	// Get active order.
	GetOrders(context.Context, *RequestGetOrders) (*ResponseGetOrders, error)
}

func RegisterFeedServer(s *grpc.Server, srv FeedServer) {
	s.RegisterService(&_Feed_serviceDesc, srv)
}

func _Feed_GetTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetTickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Feed/GetTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetTicker(ctx, req.(*RequestGetTickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_GetDepth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetDepth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetDepth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Feed/GetDepth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetDepth(ctx, req.(*RequestGetDepth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_GetDepthState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetDepthState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetDepthState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Feed/GetDepthState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetDepthState(ctx, req.(*RequestGetDepthState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_GetTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetMarketTrades)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Feed/GetTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetTrades(ctx, req.(*RequestGetMarketTrades))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_GetCandlestick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetCandlestick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetCandlestick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Feed/GetCandlestick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetCandlestick(ctx, req.(*RequestGetCandlestick))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Feed/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetOrders(ctx, req.(*RequestGetOrders))
	}
	return interceptor(ctx, in, info, handler)
}

var _Feed_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Feed",
	HandlerType: (*FeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTicker",
			Handler:    _Feed_GetTicker_Handler,
		},
		{
			MethodName: "GetDepth",
			Handler:    _Feed_GetDepth_Handler,
		},
		{
			MethodName: "GetDepthState",
			Handler:    _Feed_GetDepthState_Handler,
		},
		{
			MethodName: "GetTrades",
			Handler:    _Feed_GetTrades_Handler,
		},
		{
			MethodName: "GetCandlestick",
			Handler:    _Feed_GetCandlestick_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _Feed_GetOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feed.proto",
}

func init() { proto.RegisterFile("feed.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcd, 0x6e, 0xe4, 0x44,
	0x10, 0x1e, 0x8f, 0xed, 0xf9, 0xa9, 0xc9, 0x66, 0x93, 0x56, 0x36, 0xeb, 0x9d, 0x04, 0x88, 0x5a,
	0x80, 0xb2, 0x7b, 0xc8, 0x21, 0x9c, 0x10, 0x08, 0x69, 0xc3, 0x0a, 0x08, 0x3f, 0xda, 0x55, 0x6f,
	0x16, 0x81, 0x10, 0x1a, 0x79, 0xec, 0x4e, 0xd2, 0x9a, 0x1f, 0x4f, 0xdc, 0x3d, 0x09, 0xe1, 0xca,
	0x85, 0x33, 0x0f, 0x80, 0x10, 0xaf, 0xc0, 0x13, 0x70, 0xe1, 0x05, 0x78, 0x17, 0xce, 0xa8, 0xab,
	0xdb, 0x9e, 0x1e, 0xc7, 0xb3, 0x1b, 0x90, 0x10, 0xb7, 0xee, 0xaa, 0xea, 0xf2, 0x57, 0x5f, 0xfd,
	0x74, 0x1b, 0xe0, 0x94, 0xf3, 0xf4, 0x60, 0x96, 0x67, 0x2a, 0x23, 0x7e, 0x3e, 0x4b, 0xfa, 0x6b,
	0x49, 0x36, 0x99, 0x64, 0x53, 0x23, 0xa2, 0x7f, 0x79, 0xd0, 0x3a, 0x11, 0xc9, 0x88, 0xe7, 0x84,
	0x40, 0x30, 0x8b, 0x45, 0x1e, 0x79, 0x7b, 0xde, 0x7e, 0x97, 0xe1, 0x9a, 0x6c, 0x41, 0x38, 0xcb,
	0x45, 0xc2, 0xa3, 0x26, 0x0a, 0xcd, 0x86, 0x6c, 0x80, 0x1f, 0xcb, 0x51, 0xe4, 0xa3, 0x4c, 0x2f,
	0xb5, 0x64, 0x28, 0xd2, 0x28, 0x30, 0x92, 0xa1, 0x48, 0xc9, 0x36, 0xb4, 0x92, 0xf3, 0x78, 0x7a,
	0xc6, 0xa3, 0x70, 0xcf, 0xdb, 0xf7, 0x98, 0xdd, 0x91, 0x37, 0x61, 0x7d, 0x18, 0x4b, 0x3e, 0x88,
	0xa5, 0xe4, 0x6a, 0x70, 0x99, 0x8d, 0xa3, 0x16, 0x1e, 0x5a, 0xd3, 0xd2, 0xc7, 0x5a, 0xf8, 0x65,
	0x36, 0x26, 0x6f, 0xc3, 0xdd, 0x8b, 0x79, 0xa6, 0x5c, 0xb3, 0x36, 0x9a, 0xdd, 0x41, 0x71, 0x69,
	0x47, 0x20, 0x38, 0x17, 0x67, 0xe7, 0x51, 0xc7, 0x60, 0xd6, 0x6b, 0x8d, 0x65, 0x9c, 0x5d, 0x45,
	0x5d, 0x83, 0x65, 0x9c, 0x5d, 0x69, 0x2b, 0x25, 0x26, 0x3c, 0x82, 0x3d, 0x6f, 0xdf, 0x67, 0xb8,
	0xa6, 0x9f, 0xc2, 0x26, 0xe3, 0x17, 0x73, 0x2e, 0xd5, 0xc7, 0x5c, 0x19, 0x06, 0x24, 0x86, 0x1b,
	0x8b, 0x5c, 0x46, 0xde, 0x9e, 0x8f, 0xe1, 0xea, 0x0d, 0x79, 0x03, 0x7a, 0xf2, 0x3c, 0xbb, 0x1a,
	0xa4, 0x5c, 0xc5, 0x62, 0x8c, 0x54, 0x74, 0x18, 0x68, 0xd1, 0x13, 0x94, 0xd0, 0xf7, 0x80, 0x30,
	0x2e, 0x67, 0xd9, 0x54, 0x72, 0xc7, 0xd9, 0x5b, 0xd0, 0x56, 0x66, 0x89, 0xee, 0x7a, 0x87, 0xbd,
	0x83, 0x7c, 0x96, 0x1c, 0x18, 0x35, 0x2b, 0x74, 0xf4, 0x1b, 0x08, 0x3f, 0xe7, 0x97, 0x1c, 0x63,
	0x91, 0xe2, 0x7b, 0x8e, 0xfc, 0x87, 0x0c, 0xd7, 0x2b, 0xf8, 0xdf, 0x86, 0x56, 0x3c, 0xc9, 0xe6,
	0x53, 0x65, 0x53, 0x60, 0x77, 0x3a, 0x72, 0x39, 0x9f, 0x14, 0x59, 0x90, 0xf3, 0x09, 0xfd, 0xc9,
	0x83, 0x1e, 0x7a, 0x7f, 0x31, 0x4b, 0x63, 0xc5, 0xc9, 0x6b, 0xfa, 0x1b, 0xa9, 0xf9, 0xc6, 0xfa,
	0x61, 0x17, 0x01, 0x3d, 0x17, 0x29, 0x67, 0x28, 0x2e, 0x21, 0x34, 0xeb, 0x20, 0xf8, 0xf5, 0x10,
	0x82, 0x3a, 0x08, 0x61, 0x09, 0x01, 0x25, 0xfc, 0x02, 0xb3, 0x1c, 0x30, 0xbd, 0xa4, 0x5f, 0xc3,
	0xdd, 0x05, 0xf5, 0x4f, 0xf8, 0x4c, 0x9d, 0xaf, 0xaa, 0xbd, 0xb1, 0x98, 0x08, 0x65, 0xd1, 0x98,
	0x0d, 0xd9, 0x85, 0xae, 0x46, 0x20, 0xa4, 0xc8, 0xa6, 0x08, 0x29, 0x64, 0x0b, 0x01, 0xfd, 0xd9,
	0x83, 0x0d, 0x27, 0x15, 0xab, 0x9d, 0xef, 0x43, 0x6b, 0x8e, 0x94, 0x44, 0x4d, 0xcc, 0xcd, 0x06,
	0x52, 0xe1, 0x50, 0xc5, 0xac, 0x9e, 0xec, 0x16, 0xc5, 0xae, 0xcd, 0x60, 0x61, 0x66, 0x0a, 0x7f,
	0xb7, 0x28, 0xfc, 0x1b, 0x5a, 0xdd, 0x04, 0x37, 0x63, 0x7f, 0x04, 0x5b, 0x95, 0xd8, 0x9f, 0x2b,
	0xfd, 0x95, 0x1a, 0x8c, 0xf4, 0x77, 0x0f, 0xee, 0x55, 0x83, 0x59, 0x69, 0x4d, 0x5e, 0x87, 0x9e,
	0x9c, 0x4f, 0x06, 0xd9, 0xe9, 0x20, 0x96, 0x23, 0x69, 0x49, 0xeb, 0xca, 0xf9, 0xe4, 0xe9, 0xe9,
	0x63, 0x39, 0x92, 0x8e, 0x7e, 0x28, 0x52, 0x59, 0x50, 0x87, 0xfa, 0x23, 0x91, 0x4a, 0xf2, 0x10,
	0x36, 0x17, 0xe7, 0x07, 0x63, 0x1d, 0x84, 0xc4, 0xe4, 0x86, 0x6c, 0xbd, 0xf0, 0x82, 0xa1, 0xb9,
	0xa6, 0x43, 0x91, 0x16, 0xa6, 0xa1, 0x63, 0x7a, 0x24, 0x52, 0x63, 0x4a, 0x7f, 0xf4, 0x60, 0xed,
	0x8b, 0x38, 0x1f, 0x71, 0x75, 0x92, 0xc7, 0x29, 0x97, 0x8b, 0x72, 0xf2, 0xea, 0xcb, 0xa9, 0xb9,
	0x54, 0x4e, 0x45, 0xbd, 0xfa, 0x2b, 0xeb, 0x15, 0x1b, 0x3b, 0x58, 0x34, 0x36, 0xb9, 0x0f, 0x6d,
	0xfe, 0x1d, 0x4f, 0x06, 0x22, 0x45, 0x48, 0x01, 0x6b, 0xe9, 0xed, 0x71, 0x4a, 0x7f, 0xf5, 0x80,
	0xb8, 0x50, 0x6c, 0x4b, 0xfc, 0xe7, 0x80, 0x8a, 0x64, 0x85, 0x4e, 0xb2, 0x1c, 0x90, 0xad, 0x25,
	0x90, 0x47, 0xb0, 0xbd, 0xa8, 0x8f, 0x25, 0xe2, 0x6e, 0xdd, 0x22, 0xf4, 0x2b, 0xb8, 0xef, 0x94,
	0xcd, 0x2b, 0x9d, 0x3c, 0x84, 0x96, 0x42, 0xad, 0x6d, 0x85, 0x4d, 0x0c, 0xca, 0x3d, 0xc6, 0xac,
	0x01, 0xfd, 0xc1, 0x83, 0xde, 0x87, 0xf1, 0x34, 0x1d, 0x73, 0xa9, 0xc7, 0x57, 0x19, 0xae, 0xb7,
	0x1c, 0x6e, 0x36, 0xe3, 0x53, 0xcb, 0x1b, 0xae, 0xcb, 0x31, 0xed, 0xdf, 0x1c, 0xd3, 0xc1, 0x62,
	0x4c, 0x6f, 0x41, 0x98, 0x8c, 0x33, 0xc9, 0x2d, 0x53, 0x66, 0xa3, 0xed, 0x16, 0xb7, 0x84, 0x5e,
	0xd2, 0xdf, 0x3c, 0xd8, 0x74, 0x50, 0xd8, 0x3c, 0xfe, 0x2f, 0x58, 0x4a, 0x42, 0xdb, 0xcb, 0x59,
	0x49, 0xae, 0x93, 0x31, 0xb7, 0xb7, 0x92, 0xd9, 0xd0, 0x91, 0x6e, 0xe6, 0x22, 0xb3, 0x15, 0x12,
	0xeb, 0x12, 0x6b, 0x5c, 0x34, 0x1d, 0x17, 0x65, 0x88, 0xbe, 0x13, 0x62, 0x59, 0x02, 0x81, 0x5b,
	0x02, 0x53, 0x5d, 0x46, 0x65, 0x09, 0xfc, 0xbb, 0xaf, 0x3d, 0x82, 0x76, 0x62, 0x0e, 0xda, 0xf1,
	0x66, 0x66, 0xa4, 0xe3, 0x8c, 0x15, 0x06, 0xf4, 0x85, 0x1e, 0xbb, 0x45, 0x70, 0x4f, 0xf3, 0x54,
	0xdf, 0x7f, 0x1b, 0xe0, 0x2b, 0x91, 0xe2, 0x87, 0x02, 0xa6, 0x97, 0xe5, 0xb7, 0x9b, 0xce, 0xb7,
	0x77, 0xa0, 0x9b, 0x69, 0xfb, 0x81, 0x19, 0x4a, 0xfe, 0x7e, 0xc0, 0x3a, 0x28, 0x38, 0x4e, 0x25,
	0xfd, 0xa3, 0x09, 0x21, 0x7a, 0x23, 0x0f, 0xa0, 0x53, 0x98, 0x59, 0x8f, 0x6d, 0x6b, 0xa5, 0x3d,
	0x24, 0x63, 0xc1, 0xa7, 0x4a, 0xeb, 0x9a, 0xa8, 0xeb, 0x18, 0xc1, 0x71, 0xaa, 0xfb, 0x55, 0x5d,
	0xcf, 0x96, 0xfb, 0xf5, 0xe4, 0x7a, 0xc6, 0x19, 0x8a, 0xcb, 0x76, 0x0e, 0xea, 0xdb, 0xb9, 0x9c,
	0x0d, 0xa1, 0x3b, 0x1b, 0xfa, 0xd0, 0xb9, 0x98, 0xc7, 0x53, 0x25, 0xd4, 0xb5, 0x2d, 0x85, 0x72,
	0xaf, 0xc1, 0xc4, 0x97, 0x67, 0x03, 0x73, 0xca, 0x14, 0x45, 0x27, 0xbe, 0x3c, 0x7b, 0x86, 0x07,
	0x35, 0xcf, 0x99, 0x54, 0xb2, 0x2c, 0x0c, 0xbd, 0xd1, 0xac, 0xe4, 0x5c, 0x2a, 0xfb, 0x60, 0xc1,
	0xb5, 0x96, 0x9d, 0x72, 0x2e, 0xf1, 0xc5, 0xd2, 0x65, 0xb8, 0x26, 0x7b, 0x10, 0x4a, 0x3d, 0xfd,
	0xa3, 0x1e, 0x82, 0x35, 0x97, 0x0d, 0xde, 0x07, 0xcc, 0x28, 0x48, 0x04, 0xed, 0x24, 0xe7, 0xb1,
	0xe2, 0x69, 0xb4, 0x86, 0x25, 0x52, 0x6c, 0xe9, 0x9f, 0x4d, 0xe8, 0x21, 0x91, 0xb6, 0x59, 0x6e,
	0x97, 0x1b, 0x97, 0x74, 0xff, 0x25, 0xa4, 0x07, 0x37, 0x49, 0x47, 0x56, 0x5b, 0xaf, 0x60, 0xb5,
	0xbd, 0x8a, 0xd5, 0xce, 0xcb, 0x58, 0xed, 0xae, 0x62, 0x15, 0xea, 0x58, 0xed, 0xd5, 0xb0, 0xba,
	0x56, 0xc7, 0xea, 0x9d, 0x5b, 0xb0, 0xba, 0xbe, 0xcc, 0xea, 0xb7, 0xfa, 0x0d, 0x59, 0x76, 0xd9,
	0x3f, 0x2a, 0x7b, 0x0a, 0x2d, 0xa4, 0x52, 0x2e, 0x3d, 0x2c, 0xd0, 0x05, 0xb3, 0x9a, 0xc3, 0x5f,
	0x7c, 0x08, 0x3e, 0xe2, 0x3c, 0x25, 0x1f, 0x40, 0xb7, 0x7c, 0x57, 0x92, 0x6d, 0xb4, 0xbc, 0xf1,
	0x76, 0xed, 0xdf, 0xb7, 0xf2, 0xea, 0x3b, 0x94, 0x36, 0xc8, 0xbb, 0xd0, 0x29, 0x1f, 0x43, 0x5b,
	0x95, 0xe3, 0x28, 0xed, 0xdf, 0xab, 0x1e, 0x46, 0x31, 0x6d, 0x90, 0x4f, 0xe0, 0xce, 0xf2, 0xd3,
	0xe3, 0x41, 0xdd, 0x79, 0x54, 0xf5, 0xfb, 0xb5, 0x4e, 0x50, 0x87, 0x9e, 0x30, 0x08, 0x73, 0x0f,
	0xed, 0x54, 0xbc, 0xb8, 0xb7, 0x4d, 0x7f, 0xb7, 0xea, 0xc7, 0xd5, 0xd2, 0x06, 0xf9, 0x0c, 0xd6,
	0x2b, 0x43, 0xad, 0x5f, 0x71, 0xe7, 0xe8, 0xfa, 0x3b, 0x55, 0x6f, 0x8e, 0x92, 0x36, 0xc8, 0xfb,
	0x08, 0xcb, 0xe6, 0xee, 0x5e, 0xc5, 0x8f, 0x11, 0xf7, 0xb7, 0xab, 0x2e, 0x8c, 0x9c, 0x36, 0x9e,
	0x35, 0x86, 0x2d, 0xfc, 0x8f, 0x7a, 0xe7, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0x4a, 0x0a,
	0x18, 0x68, 0x0d, 0x00, 0x00,
}
