// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trading.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	trading.proto
	common.proto
	account.proto
	error.proto
	ws.proto
	feed.proto

It has these top-level messages:
	RequestCreateOrder
	ResponseCreateOrder
	RequestCancelOrder
	ResponseCancelOrder
	RequestGetPosns
	Position
	ResponseGetPosns
	RequestDeposit
	ResponseDeposit
	RequestWithdrawal
	ResponseWithdrawal
	WsMessage
	Ticker
	RequestGetTickers
	ResponseGetTickers
	Level
	LevelUpdate
	RequestGetDepth
	ResponseGetDepth
	RequestGetDepthState
	ResponseGetDepthState
	MarketTrades
	MarketTradesUpdate
	RequestGetMarketTrades
	ResponseGetMarketTrades
	Candlestick
	CandlestickUpdate
	RequestGetCandlestick
	ResponseGetCandlestick
	RequestGetOrders
	Order
	OrderUpdate
	ResponseGetOrders
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Ignoring public import of Side from common.proto

// Ignoring public import of State from common.proto

// Ignoring public import of Type from common.proto

// Ignoring public import of Role from common.proto

type RequestCreateOrder struct {
	Tid      uint64  `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	Pair     string  `protobuf:"bytes,2,opt,name=pair" json:"pair,omitempty"`
	Type     Type    `protobuf:"varint,3,opt,name=type,enum=rpc.Type" json:"type,omitempty"`
	Side     Side    `protobuf:"varint,4,opt,name=side,enum=rpc.Side" json:"side,omitempty"`
	Price    string  `protobuf:"bytes,5,opt,name=price" json:"price,omitempty"`
	Quantity string  `protobuf:"bytes,6,opt,name=quantity" json:"quantity,omitempty"`
	MakerFee float64 `protobuf:"fixed64,7,opt,name=maker_fee,json=makerFee" json:"maker_fee,omitempty"`
	TakerFee float64 `protobuf:"fixed64,8,opt,name=taker_fee,json=takerFee" json:"taker_fee,omitempty"`
	ClientId uint64  `protobuf:"varint,9,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (m *RequestCreateOrder) Reset()                    { *m = RequestCreateOrder{} }
func (m *RequestCreateOrder) String() string            { return proto.CompactTextString(m) }
func (*RequestCreateOrder) ProtoMessage()               {}
func (*RequestCreateOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestCreateOrder) GetTid() uint64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *RequestCreateOrder) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *RequestCreateOrder) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_TYPE_NONE
}

func (m *RequestCreateOrder) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_NO_SIDE
}

func (m *RequestCreateOrder) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *RequestCreateOrder) GetQuantity() string {
	if m != nil {
		return m.Quantity
	}
	return ""
}

func (m *RequestCreateOrder) GetMakerFee() float64 {
	if m != nil {
		return m.MakerFee
	}
	return 0
}

func (m *RequestCreateOrder) GetTakerFee() float64 {
	if m != nil {
		return m.TakerFee
	}
	return 0
}

func (m *RequestCreateOrder) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

type ResponseCreateOrder struct {
	Tid        uint64 `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	Pair       string `protobuf:"bytes,2,opt,name=pair" json:"pair,omitempty"`
	OrderId    uint64 `protobuf:"varint,3,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Available  string `protobuf:"bytes,4,opt,name=available" json:"available,omitempty"`
	Frozen     string `protobuf:"bytes,5,opt,name=frozen" json:"frozen,omitempty"`
	ClientId   uint64 `protobuf:"varint,6,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	AmountUsed string `protobuf:"bytes,7,opt,name=amount_used,json=amountUsed" json:"amount_used,omitempty"`
}

func (m *ResponseCreateOrder) Reset()                    { *m = ResponseCreateOrder{} }
func (m *ResponseCreateOrder) String() string            { return proto.CompactTextString(m) }
func (*ResponseCreateOrder) ProtoMessage()               {}
func (*ResponseCreateOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResponseCreateOrder) GetTid() uint64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *ResponseCreateOrder) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *ResponseCreateOrder) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *ResponseCreateOrder) GetAvailable() string {
	if m != nil {
		return m.Available
	}
	return ""
}

func (m *ResponseCreateOrder) GetFrozen() string {
	if m != nil {
		return m.Frozen
	}
	return ""
}

func (m *ResponseCreateOrder) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *ResponseCreateOrder) GetAmountUsed() string {
	if m != nil {
		return m.AmountUsed
	}
	return ""
}

type RequestCancelOrder struct {
	Tid      uint64   `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	Pair     string   `protobuf:"bytes,2,opt,name=pair" json:"pair,omitempty"`
	OrderIds []uint64 `protobuf:"varint,3,rep,packed,name=order_ids,json=orderIds" json:"order_ids,omitempty"`
}

func (m *RequestCancelOrder) Reset()                    { *m = RequestCancelOrder{} }
func (m *RequestCancelOrder) String() string            { return proto.CompactTextString(m) }
func (*RequestCancelOrder) ProtoMessage()               {}
func (*RequestCancelOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RequestCancelOrder) GetTid() uint64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *RequestCancelOrder) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *RequestCancelOrder) GetOrderIds() []uint64 {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

type ResponseCancelOrder struct {
	Tid      uint64   `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	Pair     string   `protobuf:"bytes,2,opt,name=pair" json:"pair,omitempty"`
	OrderIds []uint64 `protobuf:"varint,3,rep,packed,name=order_ids,json=orderIds" json:"order_ids,omitempty"`
}

func (m *ResponseCancelOrder) Reset()                    { *m = ResponseCancelOrder{} }
func (m *ResponseCancelOrder) String() string            { return proto.CompactTextString(m) }
func (*ResponseCancelOrder) ProtoMessage()               {}
func (*ResponseCancelOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ResponseCancelOrder) GetTid() uint64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *ResponseCancelOrder) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *ResponseCancelOrder) GetOrderIds() []uint64 {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestCreateOrder)(nil), "rpc.RequestCreateOrder")
	proto.RegisterType((*ResponseCreateOrder)(nil), "rpc.ResponseCreateOrder")
	proto.RegisterType((*RequestCancelOrder)(nil), "rpc.RequestCancelOrder")
	proto.RegisterType((*ResponseCancelOrder)(nil), "rpc.ResponseCancelOrder")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Trading service

type TradingClient interface {
	// Create new order.
	CreateOrder(ctx context.Context, in *RequestCreateOrder, opts ...grpc.CallOption) (*ResponseCreateOrder, error)
	// Cancel un-filled order.
	CancelOrder(ctx context.Context, in *RequestCancelOrder, opts ...grpc.CallOption) (*ResponseCancelOrder, error)
}

type tradingClient struct {
	cc *grpc.ClientConn
}

func NewTradingClient(cc *grpc.ClientConn) TradingClient {
	return &tradingClient{cc}
}

func (c *tradingClient) CreateOrder(ctx context.Context, in *RequestCreateOrder, opts ...grpc.CallOption) (*ResponseCreateOrder, error) {
	out := new(ResponseCreateOrder)
	err := grpc.Invoke(ctx, "/rpc.Trading/CreateOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) CancelOrder(ctx context.Context, in *RequestCancelOrder, opts ...grpc.CallOption) (*ResponseCancelOrder, error) {
	out := new(ResponseCancelOrder)
	err := grpc.Invoke(ctx, "/rpc.Trading/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Trading service

type TradingServer interface {
	// Create new order.
	CreateOrder(context.Context, *RequestCreateOrder) (*ResponseCreateOrder, error)
	// Cancel un-filled order.
	CancelOrder(context.Context, *RequestCancelOrder) (*ResponseCancelOrder, error)
}

func RegisterTradingServer(s *grpc.Server, srv TradingServer) {
	s.RegisterService(&_Trading_serviceDesc, srv)
}

func _Trading_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Trading/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).CreateOrder(ctx, req.(*RequestCreateOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCancelOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Trading/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).CancelOrder(ctx, req.(*RequestCancelOrder))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trading_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Trading",
	HandlerType: (*TradingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _Trading_CreateOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Trading_CancelOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trading.proto",
}

func init() { proto.RegisterFile("trading.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x86, 0xd7, 0xcd, 0x76, 0x37, 0x9e, 0x02, 0x42, 0x06, 0x81, 0xd9, 0x82, 0x88, 0x72, 0xca,
	0x69, 0x0f, 0xe5, 0x0d, 0x40, 0x42, 0xea, 0x09, 0x64, 0x8a, 0xe0, 0xb6, 0x72, 0xe3, 0x29, 0xb2,
	0x48, 0x6c, 0xd7, 0x76, 0x90, 0x96, 0x1b, 0x8f, 0xc0, 0x6b, 0xf1, 0x54, 0x28, 0x4e, 0x68, 0xb2,
	0xf4, 0x54, 0xa9, 0x37, 0xcf, 0xff, 0x59, 0x7f, 0x3c, 0xff, 0x4c, 0xe0, 0x61, 0xf4, 0x52, 0x69,
	0xf3, 0x6d, 0xeb, 0xbc, 0x8d, 0x96, 0x65, 0xde, 0xd5, 0x9b, 0x07, 0xb5, 0x6d, 0x5b, 0x6b, 0x06,
	0xa9, 0xfc, 0x75, 0x04, 0x4c, 0xe0, 0x75, 0x87, 0x21, 0xbe, 0xf3, 0x28, 0x23, 0x7e, 0xf0, 0x0a,
	0x3d, 0x7b, 0x0c, 0x59, 0xd4, 0x8a, 0x93, 0x82, 0x54, 0x4b, 0xd1, 0x1f, 0x19, 0x83, 0xa5, 0x93,
	0xda, 0xf3, 0xa3, 0x82, 0x54, 0x54, 0xa4, 0x33, 0x7b, 0x05, 0xcb, 0xb8, 0x77, 0xc8, 0xb3, 0x82,
	0x54, 0x8f, 0xce, 0xe8, 0xd6, 0xbb, 0x7a, 0x7b, 0xb1, 0x77, 0x28, 0x92, 0xdc, 0xe3, 0xa0, 0x15,
	0xf2, 0xe5, 0x0c, 0x7f, 0xd2, 0x0a, 0x45, 0x92, 0xd9, 0x53, 0x38, 0x76, 0x5e, 0xd7, 0xc8, 0x8f,
	0x93, 0xe5, 0x50, 0xb0, 0x0d, 0xe4, 0xd7, 0x9d, 0x34, 0x51, 0xc7, 0x3d, 0x5f, 0x25, 0x70, 0x53,
	0xb3, 0x53, 0xa0, 0xad, 0xfc, 0x8e, 0x7e, 0x77, 0x85, 0xc8, 0xd7, 0x05, 0xa9, 0x88, 0xc8, 0x93,
	0xf0, 0x1e, 0xb1, 0x87, 0xf1, 0x06, 0xe6, 0x03, 0x8c, 0x33, 0x58, 0x37, 0x1a, 0x4d, 0xdc, 0x69,
	0xc5, 0x69, 0xea, 0x2a, 0x1f, 0x84, 0x73, 0x55, 0xfe, 0x21, 0xf0, 0x44, 0x60, 0x70, 0xd6, 0x04,
	0xbc, 0x7b, 0x08, 0x2f, 0x20, 0xb7, 0xfd, 0xf5, 0xde, 0x39, 0x4b, 0x57, 0xd7, 0xa9, 0x3e, 0x57,
	0xec, 0x25, 0x50, 0xf9, 0x43, 0xea, 0x46, 0x5e, 0x36, 0x43, 0x0a, 0x54, 0x4c, 0x02, 0x7b, 0x06,
	0xab, 0x2b, 0x6f, 0x7f, 0xa2, 0x19, 0x03, 0x18, 0xab, 0xc3, 0xb7, 0xae, 0x0e, 0xdf, 0xca, 0x5e,
	0xc3, 0x89, 0x6c, 0x6d, 0x67, 0xe2, 0xae, 0x0b, 0xa8, 0x52, 0x08, 0x54, 0xc0, 0x20, 0x7d, 0x0e,
	0xa8, 0xca, 0x2f, 0xd3, 0x3c, 0xa5, 0xa9, 0xb1, 0xb9, 0x4b, 0x2b, 0xa7, 0x40, 0xff, 0xb5, 0x12,
	0x78, 0x56, 0x64, 0xfd, 0x97, 0xc7, 0x5e, 0x42, 0xf9, 0x75, 0x16, 0xd2, 0xbd, 0x3a, 0x9f, 0xfd,
	0x26, 0xb0, 0xbe, 0x18, 0x16, 0x95, 0xbd, 0x85, 0x93, 0xf9, 0x08, 0x9e, 0xa7, 0xa5, 0xb9, 0xbd,
	0xa0, 0x1b, 0x3e, 0x82, 0x5b, 0x53, 0x2b, 0x17, 0xc9, 0x63, 0xf6, 0xc2, 0x43, 0x8f, 0x09, 0xfc,
	0xef, 0x31, 0x91, 0x72, 0xf1, 0x71, 0x71, 0xb9, 0x4a, 0x3f, 0xc8, 0x9b, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x4c, 0xa5, 0x00, 0x8c, 0x44, 0x03, 0x00, 0x00,
}
